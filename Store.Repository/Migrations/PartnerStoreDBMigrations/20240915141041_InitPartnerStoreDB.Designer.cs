// <auto-generated />
using System;
using AnyMusic.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnyMusic.Repository.Migrations.PartnerStoreDBMigrations
{
    [DbContext(typeof(PartnerStoreDB))]
    [Migration("20240915141041_InitPartnerStoreDB")]
    partial class InitPartnerStoreDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.AlbumModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Albums", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.ArtistModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.ArtistOfTrack", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistOfTracks", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.GenreOfTrack", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("GenreOfTracks", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.TrackModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationMiliseconds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.ArtistOfTrack", b =>
                {
                    b.HasOne("AnyMusic.Domain.Domain.PartnerModels.ArtistModel", "Artist")
                        .WithMany("ArtistTracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnyMusic.Domain.Domain.PartnerModels.TrackModel", "Track")
                        .WithMany("Artists")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.GenreOfTrack", b =>
                {
                    b.HasOne("AnyMusic.Domain.Domain.PartnerModels.Genre", "Genre")
                        .WithMany("GenreTracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnyMusic.Domain.Domain.PartnerModels.TrackModel", "Track")
                        .WithMany("Genres")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.TrackModel", b =>
                {
                    b.HasOne("AnyMusic.Domain.Domain.PartnerModels.AlbumModel", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.AlbumModel", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.ArtistModel", b =>
                {
                    b.Navigation("ArtistTracks");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.Genre", b =>
                {
                    b.Navigation("GenreTracks");
                });

            modelBuilder.Entity("AnyMusic.Domain.Domain.PartnerModels.TrackModel", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
